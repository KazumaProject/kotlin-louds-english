# This workflow builds a Java project with Gradle, generates data files,
# and then creates a GitHub Release, attaching the data files as assets.

name: Build and Release Data Artifacts

on:
  # Triggers the workflow on push events to the main branch
  push:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch: {}

# Sets the necessary permissions for the job.
# 'contents: write' is required to create releases and upload assets.
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository's code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up the Java environment
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Cache Gradle dependencies to speed up future builds
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Make the Gradle wrapper executable to prevent permission errors
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Step 5: Build the project using the Gradle wrapper
      - name: Build project
        run: ./gradlew clean build --no-daemon

      # Step 6: Generate the .dat files by running the specified Gradle task
      # This assumes the 'run' task is responsible for creating these files.
      - name: Generate .dat artifacts
        run: ./gradlew run --no-daemon

      # Step 7: Create a GitHub Release and upload all data files as assets
      # This single step replaces the separate create and upload actions and
      # correctly handles authentication using the GITHUB_TOKEN.
      - name: Create GitHub Release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        with:
          # The release tag will be 'v1', 'v2', etc., based on the run number.
          tag_name: v${{ github.run_number }}
          name: Data Artifacts v${{ github.run_number }}
          # Set draft and prerelease status
          draft: false
          prerelease: false
          # A list of files to be uploaded as release assets.
          # Wildcards can also be used, e.g., 'src/main/resources/*.dat'
          files: |
            src/main/resources/reading.dat
            src/main/resources/token.dat
            src/main/resources/word.dat
